# Gradebook

Sample gradebook-type Rails application built by Ryan Stenberg.

## Exercise Description

We'd like you to build an application that allows for the recording and reporting of courses offered by teachers and taken by students. It should satisfy these stories:

* A Teacher can manage his course roster
* A Teacher can view the enrolled students and their grades for a given course
* A Student can see the courses he is registered for (with grades)
* A Student can see his GPA for a given semester
* An Administrator can view enrollment counts across all courses for a semester (performance is a concern)
* An Administrator can view an average grade for a given course (performance is a concern)

## Environment
Built on Rails v4.0.0 and Ruby v2.0.0.

## Dependencies
[List dependencies.]

## Assumptions
Only teachers can add/update/delete courses.

## Key Decisions
New users creating accounts can choose role/type in order to easily view role/type-related functionality.  In a non-sample application, users should default to a basic role and then promoted by an admin (or some similar process).

Students cannot enroll in courses from past semesters (ones that have ended).  Likewise, teachers can only modify grades for current (and future -- see next point) semesters.

Any new enrollment (not generated by seed data) is automatically assigned a random grade to facilitate grade-related functionality observation.  This will create courses in the future with grades but also lets you work with more than 1-semester worth of data.  I thought it was more important to demonstrate the functionality across multiple semesters.  In a non-sample application, teachers would be limited to modifying grades for the current semester only.

Course seed data is automatically generated with variety in mind rather than plausibility of credit hours vs course-level (i.e. 100 through 400-level) so that the GPA calculations are more dynamic.

Semester seed data is automatically generated in 90-day increments, assigning a season-year name by approximating based on the mid-point of the semester.  Again, the focus was on creating a span of semesters where validations could be observed/tested rather than having true-to-life standard Fall/Spring/Summer semesters (which usually vary in duration).

